(window.webpackJsonp=window.webpackJsonp||[]).push([[83],{623:function(n){n.exports=JSON.parse('{"name":"linear","displayName":"Linear *线性布局*","group":"layout","text":"\\n提供一种简单的线性布局，基于 CSS Flex 实现。\\n\\n``` demo.804ca2dd\\nimport { Linear } from \'nami\'\\n\\nrender(\\n    <Linear>\\n        <div className=\\"box\\" />\\n        <div className=\\"box\\" />\\n        <div className=\\"box\\" />\\n        <div className=\\"box\\" />\\n    </Linear>\\n)\\n```\\n\\n## 布局方向\\n\\n默认所有元素按水平方向布局，通过 `direction` 参数可以更改为垂直布局或反向布局：\\n\\n``` demo.9ca58f0a\\nimport { Linear } from \'nami\'\\n\\nrender(\\n    <div>\\n        <strong>horizontal - 水平布局（默认）</strong>\\n\\n        <Linear direction=\\"horizontal\\">\\n            <div className=\\"box\\">1</div>\\n            <div className=\\"box\\">2</div>\\n            <div className=\\"box\\">3</div>\\n        </Linear>\\n\\n        <hr />\\n\\n        <strong>horizontal-reverse - 水平反向布局</strong>\\n\\n        <Linear direction=\\"horizontal-reverse\\">\\n            <div className=\\"box\\">1</div>\\n            <div className=\\"box\\">2</div>\\n            <div className=\\"box\\">3</div>\\n        </Linear>\\n\\n        <hr />\\n\\n        <strong>vertical - 垂直布局</strong>\\n\\n        <Linear direction=\\"vertical\\">\\n            <div className=\\"box\\">1</div>\\n            <div className=\\"box\\">2</div>\\n            <div className=\\"box\\">3</div>\\n        </Linear>\\n\\n        <hr />\\n\\n        <strong>vertical-reverse - 垂直反向布局</strong>\\n\\n        <Linear direction=\\"vertical-reverse\\">\\n            <div className=\\"box\\">1</div>\\n            <div className=\\"box\\">2</div>\\n            <div className=\\"box\\">3</div>\\n        </Linear>\\n    </div>\\n)\\n```\\n\\n在使用 Linear 时，我们经常会需要切换布局方向，尤其是垂直布局，有的场景下它的使用频度甚至高于水平布局。因此为了方便使用，我们额外提供了四个包装组件：HLinear、HrLinear、VLinear 及 VrLinear（参考自 SwiftUI）：\\n\\n``` demo.38ff66f0\\nimport { HLinear, VLinear, HrLinear, VrLinear } from \'nami\'\\n\\nrender(\\n    <div>\\n        <strong>HLinear - 水平布局</strong>\\n\\n        <HLinear>\\n            <div className=\\"box\\">1</div>\\n            <div className=\\"box\\">2</div>\\n            <div className=\\"box\\">3</div>\\n        </HLinear>\\n\\n        <hr />\\n\\n        <strong>HrLinear - 水平反向布局</strong>\\n\\n        <HrLinear>\\n            <div className=\\"box\\">1</div>\\n            <div className=\\"box\\">2</div>\\n            <div className=\\"box\\">3</div>\\n        </HrLinear>\\n\\n        <hr />\\n\\n        <strong>VLinear</strong>\\n\\n        <VLinear>\\n            <div className=\\"box\\">1</div>\\n            <div className=\\"box\\">2</div>\\n            <div className=\\"box\\">3</div>\\n        </VLinear>\\n\\n        <hr />\\n\\n        <strong>VrLinear - 垂直反向布局</strong>\\n\\n        <VrLinear>\\n            <div className=\\"box\\">1</div>\\n            <div className=\\"box\\">2</div>\\n            <div className=\\"box\\">3</div>\\n        </VrLinear>\\n    </div>\\n)\\n```\\n\\n## 间距\\n\\nLinear 提供两个间距相关的属性：`padding` 及 `spacing`，分别用于控制容器与元素之间的间距，及元素与元素之间的间距。 它们都支持如下三个间距值：\\n\\n-   `true` 普通间距，使用样式配置变量 `--distance-horizontal` 的宽度值；\\n-   `\\"small\\"` 较小间距，是普通间距的一半；\\n-   `\\"large\\"` 较大间距，是普通间距的两倍；\\n\\n**padding**\\n\\n``` demo.469b63a7\\nimport { Linear } from \'nami\'\\n\\nrender(\\n    <div>\\n        <strong>small</strong>\\n\\n        <Linear padding=\\"small\\">\\n            <div className=\\"box\\" />\\n            <div className=\\"box\\" />\\n            <div className=\\"box\\" />\\n            <div className=\\"box\\" />\\n        </Linear>\\n\\n        <hr />\\n\\n        <strong>true</strong>\\n\\n        <Linear padding>\\n            <div className=\\"box\\" />\\n            <div className=\\"box\\" />\\n            <div className=\\"box\\" />\\n            <div className=\\"box\\" />\\n        </Linear>\\n\\n        <hr />\\n\\n        <strong>large</strong>\\n\\n        <Linear padding=\\"large\\">\\n            <div className=\\"box\\" />\\n            <div className=\\"box\\" />\\n            <div className=\\"box\\" />\\n            <div className=\\"box\\" />\\n        </Linear>\\n    </div>\\n)\\n```\\n\\n**spacing**\\n\\n``` demo.db9a0571\\nimport { Linear } from \'nami\'\\n\\nrender(\\n    <div>\\n        <strong>small</strong>\\n\\n        <Linear spacing=\\"small\\">\\n            <div className=\\"box\\" />\\n            <div className=\\"box\\" />\\n            <div className=\\"box\\" />\\n            <div className=\\"box\\" />\\n        </Linear>\\n\\n        <hr />\\n\\n        <strong>true</strong>\\n\\n        <Linear spacing>\\n            <div className=\\"box\\" />\\n            <div className=\\"box\\" />\\n            <div className=\\"box\\" />\\n            <div className=\\"box\\" />\\n        </Linear>\\n\\n        <hr />\\n\\n        <strong>large</strong>\\n\\n        <Linear spacing=\\"large\\">\\n            <div className=\\"box\\" />\\n            <div className=\\"box\\" />\\n            <div className=\\"box\\" />\\n            <div className=\\"box\\" />\\n        </Linear>\\n    </div>\\n)\\n```\\n\\n## 对齐\\n\\n与对齐相关的也有两个属性：`justify` 及 `align`，分别用于控制主轴上的对齐方式，及交叉轴上的对齐方式。它们的默认值和 CSS 属性 `justify-content` 及 `align-items` 的默认值相同：\\n\\n**justify**\\n\\n``` demo.64951aaf\\nimport { Linear } from \'nami\'\\n\\nrender(\\n    <div>\\n        <strong>start - 起始位置对齐（默认）</strong>\\n\\n        <Linear justify=\\"start\\">\\n            <div className=\\"box\\" />\\n            <div className=\\"box\\" />\\n            <div className=\\"box\\" />\\n        </Linear>\\n\\n        <hr />\\n\\n        <strong>end - 结束位置对齐</strong>\\n\\n        <Linear justify=\\"end\\">\\n            <div className=\\"box\\" />\\n            <div className=\\"box\\" />\\n            <div className=\\"box\\" />\\n        </Linear>\\n\\n        <hr />\\n\\n        <strong>center - 居中对齐</strong>\\n\\n        <Linear justify=\\"center\\">\\n            <div className=\\"box\\" />\\n            <div className=\\"box\\" />\\n            <div className=\\"box\\" />\\n        </Linear>\\n\\n        <hr />\\n\\n        <strong>between - 两端对齐</strong>\\n\\n        <Linear justify=\\"between\\">\\n            <div className=\\"box\\" />\\n            <div className=\\"box\\" />\\n            <div className=\\"box\\" />\\n        </Linear>\\n\\n        <hr />\\n\\n        <strong>around - 分散对齐</strong>\\n\\n        <Linear justify=\\"around\\">\\n            <div className=\\"box\\" />\\n            <div className=\\"box\\" />\\n            <div className=\\"box\\" />\\n        </Linear>\\n    </div>\\n)\\n```\\n\\n**align**\\n\\n``` demo.7ebed9e9\\nimport { Linear } from \'nami\'\\n\\nrender(\\n    <div>\\n        <strong>stretch - 填充（默认）</strong>\\n\\n        <Linear align=\\"stretch\\">\\n            <div className=\\"box box-h-small\\" />\\n            <div className=\\"box box-h-large\\" />\\n            <div className=\\"box box-h-middle\\" />\\n        </Linear>\\n\\n        <hr />\\n        <strong>start - 顶端对齐</strong>\\n\\n        <Linear align=\\"start\\">\\n            <div className=\\"box box-h-small\\" />\\n            <div className=\\"box box-h-large\\" />\\n            <div className=\\"box box-h-middle\\" />\\n        </Linear>\\n\\n        <hr />\\n\\n        <strong>end - 底端对齐</strong>\\n\\n        <Linear align=\\"end\\">\\n            <div className=\\"box box-h-small\\" />\\n            <div className=\\"box box-h-large\\" />\\n            <div className=\\"box box-h-middle\\" />\\n        </Linear>\\n\\n        <hr />\\n\\n        <strong>center - 中部对齐</strong>\\n\\n        <Linear align=\\"center\\">\\n            <div className=\\"box box-h-small\\" />\\n            <div className=\\"box box-h-large\\" />\\n            <div className=\\"box box-h-middle\\" />\\n        </Linear>\\n    </div>\\n)\\n```\\n\\n## 弹性布局\\n\\n默认 Linear 内的所有元素在主轴上仅分配其自身所占用的空间，无论主轴空间是空余还是不足（即 `flex: 0 0 auto;`），\\n但通常在实现自适应布局时，我们往往会需要其中的一个或多个元素变为弹性元素，当主轴上有剩余空间时，它会会自动扩展以填充空间，而当主轴空间不足时，它们又会自动收缩。\\n\\n在 Linear 组件中，若要实现这一点非常简单（当然有时也不简单），只需给需要弹性伸缩的子元素添加 `$flex` 属性即可：\\n\\n``` demo.a895aa71\\nimport { Linear } from \'nami\'\\n\\nrender(\\n    <div>\\n        <Linear>\\n            <div className=\\"box\\" $flex />\\n            <div className=\\"box\\" />\\n            <div className=\\"box\\" />\\n        </Linear>\\n\\n        <Linear>\\n            <div className=\\"box\\" $flex />\\n            <div className=\\"box\\" />\\n            <div className=\\"box\\" $flex />\\n        </Linear>\\n    </div>\\n)\\n```\\n\\n## 栅格布局\\n\\n除了弹性布局之外，我们还提供传统的栅格布局，即将容器空间等分为一定数量的列，其中的元素占据某几列的空间。\\nNami 所提供的是 24 列栅格，你只需要在子元素上设置 `$col` 属性并指定所占据的列数即可：\\n\\n``` demo.ec00b015\\nimport { Linear } from \'nami\'\\n\\nrender(\\n    <div>\\n        <Linear>\\n            <div className=\\"box\\" $col={1}>\\n                1\\n            </div>\\n            <div className=\\"box\\" $col={2}>\\n                2\\n            </div>\\n            <div className=\\"box\\" $col={3}>\\n                3\\n            </div>\\n            <div className=\\"box\\" $col={6}>\\n                6\\n            </div>\\n            <div className=\\"box\\" $col={12}>\\n                12\\n            </div>\\n        </Linear>\\n    </div>\\n)\\n```\\n\\n**注意：**设置了 `$col` 属性的子元素会被强制设置其 CSS 属性 `box-sizing` 为 `border-box`，有时这会影响子元素的原有样式，在使用时需要注意；\\n\\n`$col` 可以和 `$flex` 同时使用，此时当容器空间不足时，栅格元素会自动收缩：\\n\\n``` demo.df8da997\\nimport { Linear } from \'nami\'\\n\\nrender(\\n    <div>\\n        <Linear>\\n            <div className=\\"box\\"></div>\\n            <div className=\\"box\\" $col={12} $flex>\\n                12\\n            </div>\\n            <div className=\\"box\\"></div>\\n            <div className=\\"box\\" $col={12} $flex>\\n                12\\n            </div>\\n            <div className=\\"box\\"></div>\\n        </Linear>\\n    </div>\\n)\\n```\\n\\n## 子元素对齐\\n\\n通过 `$align` 属性，我们可以为子元素单独指定其在交叉轴上的对齐方式：\\n\\n``` demo.acf69689\\nimport { Linear } from \'nami\'\\n\\nrender(\\n    <div>\\n        <strong>stretch - 填充</strong>\\n\\n        <Linear align=\\"end\\">\\n            <div className=\\"box box-h-small\\" $align=\\"stretch\\" />\\n            <div className=\\"box box-h-large\\" />\\n            <div className=\\"box box-h-middle\\" />\\n        </Linear>\\n\\n        <hr />\\n        <strong>start - 顶端对齐</strong>\\n\\n        <Linear>\\n            <div className=\\"box box-h-small\\" $align=\\"start\\" />\\n            <div className=\\"box box-h-large\\" />\\n            <div className=\\"box box-h-middle\\" />\\n        </Linear>\\n\\n        <hr />\\n\\n        <strong>end - 底端对齐</strong>\\n\\n        <Linear>\\n            <div className=\\"box box-h-small\\" $align=\\"end\\" />\\n            <div className=\\"box box-h-large\\" />\\n            <div className=\\"box box-h-middle\\" />\\n        </Linear>\\n\\n        <hr />\\n\\n        <strong>center - 中部对齐</strong>\\n\\n        <Linear>\\n            <div className=\\"box box-h-small\\" $align=\\"center\\" />\\n            <div className=\\"box box-h-large\\" />\\n            <div className=\\"box box-h-middle\\" />\\n        </Linear>\\n    </div>\\n)\\n```\\n\\n## 注意事项\\n\\n1\\\\. 修饰属性 `$flex`、`$col` 及 `$align` 只能设置在 Linear 组件的直接子元素中，因此像下面的代码是无效的：\\n\\n```jsx\\nfunction Demo() {\\n    return (\\n        <Linear>\\n            <SomeWrapComponent>\\n                <div $flex >\\n            </SomeWrapComponent>\\n        </Linear>\\n    )\\n}\\n```\\n\\n当然，设置在子元素组件内也是无效的：\\n\\n```jsx\\nfunction Demo() {\\n    return (\\n        <Linear>\\n            <Item />\\n        </Linear>\\n    )\\n}\\n\\nfunction Item() {\\n    return <div $flex />\\n}\\n```\\n\\n2\\\\. Linear 组件会在子元素上追加一些额外的 class，因此子元素组件必须接收并处理从 props 传入的 className：\\n\\n```jsx\\nimport clsx from \'clsx\'\\n\\nfunction Demo() {\\n    return (\\n        <Linear>\\n            <Item $flex />\\n        </Linear>\\n    )\\n}\\n\\nfunction Item({ className, ...otherProps }) {\\n    return <div className={clsx(className, \'own-class-name\')} {...otherProps} />\\n}\\n```\\n\\n3\\\\. 在使用 `$flex` 或 `$col` 时，需要确保子元素组件是支持弹性 \\b 伸缩的。如果子元素组件仅支持固定宽/高，或仅支持在某个宽/高度区间内，那么就要考虑是改造该组件，还是确实不能将其应用于弹性布局或栅格布局中。\\n\\n## 参数\\n\\n### Linear\\n\\n| 参数        | 说明                         | 类型                                                                     | 默认值       |\\n| ----------- | ---------------------------- | ------------------------------------------------------------------------ | ------------ |\\n| `direction` | 布局方向                     | `horizontal`, `vertical`, <br />`horizontal-reverse`, `vertical-reverse` | `horizontal` |\\n| `justify`   | 所有元素在主轴上的对齐方式   | `start`, `end`, `center`, `between`, `around`                            | `start`      |\\n| `align`     | 所有元素在交叉轴上的对齐方式 | `start`, `end`, `center`, `stretch`                                      | `stretch`    |\\n| `padding`   | 元素与容器之间的间距         | `boolean`, `small`, `large`                                              | `false`      |\\n| `spacing`   | 元素与元素之间的间距         | `boolean`, `small`, `large`                                              | `false`      |\\n| `component` | 用于渲染 Linear 容器的组件   | `string`, `FunctionComponent`, `ComponentClass`                          | `div`        |\\n| `children`  | 子元素                       | `ReactElement`                                                           |              |\\n\\n### 子元素修饰属性\\n\\n| 参数     | 说明                         | 类型                                | 默认值  |\\n| -------- | ---------------------------- | ----------------------------------- | ------- |\\n| `$flex`  | 弹性布局                     | `boolean`                           | `false` |\\n| `$col`   | 栅格布局                     | `number<1...24>`                    |         |\\n| `$align` | 该子元素在交叉轴上的对齐方式 | `start`, `end`, `center`, `stretch` |         |\\n","path":"./src/components/linear/index.md","demos":{"804ca2dd":{"name":"default"},"9ca58f0a":{"name":"direction"},"38ff66f0":{"name":"sugars"},"469b63a7":{"name":"padding"},"db9a0571":{"name":"spacing"},"64951aaf":{"name":"justify"},"7ebed9e9":{"name":"align"},"a895aa71":{"name":"item-flex"},"ec00b015":{"name":"item-col"},"df8da997":{"name":"item-col-with-flex"},"acf69689":{"name":"item-align"}}}')}}]);