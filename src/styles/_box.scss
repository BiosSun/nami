@charset "utf-8";

@use '~nojiko/sass/nojiko';
@use 'functions' as functions;

// box size
// -----------------------------------------------------------------------------

///
/// 定义盒元素尺寸
///
/// 在 Nami 中，大多数组件在样式上都被视为一个盒元素，在盒元素上定义该组件的边框、内边距及文本样式，以此提供一致的样式。
/// 对于单行元素，可以指定高度，内部文本的行高将由高度计算得来。
///
/// @param {"base" | "large" | "small"} $size - 盒元素尺寸
/// @param {boolean} $is-single - 是否为单行盒元素
/// @param {boolean} $is-limit-min-width - 是否限定盒元素的最小宽度（最小宽度等于最小高度）
/// @param {length} $padding-horizontal - 自定义水平内边距，因为一些组件中可能需要更多的水平内边距，如 "Button" 组件
/// @param {length} $border-width - 边框大小
/// @param {string} $border-style - 边框样式
@mixin size(
    $size: 'base',
    $is-single: false,
    $is-limit-min-width: false,
    $padding-horizontal: var(--box-#{$size}-padding-horizontal),
    $border-width: var(--box-#{$size}-border-width),
    $border-style: solid
) {
    $parsed: size-parser(
        $size,
        $is-single,
        $is-limit-min-width,
        $padding-horizontal,
        $border-width,
        $border-style
    );

    @include size-output($parsed);
}

///
/// 根据所解析的数据输出一份完整的盒模型尺寸相关样式
///
@mixin size-output($parsed) {
    @if nojiko.map-deep-get($parsed, is-single) {
        height: nojiko.map-deep-get($parsed, min-height);
    } @else {
        min-height: nojiko.map-deep-get($parsed, min-height);
    }

    @if nojiko.map-deep-get($parsed, is-limit-min-width) {
        min-width: nojiko.map-deep-get($parsed, min-height);
    }

    padding: nojiko.map-deep-get($parsed, 'padding' 'shorthand');

    border-style: nojiko.map-deep-get($parsed, border style);
    border-width: nojiko.map-deep-get($parsed, border width shorthand);
    border-radius: nojiko.map-deep-get($parsed, border radius shorthand);

    font-size: nojiko.map-deep-get($parsed, font-size);
    line-height: nojiko.map-deep-get($parsed, line-height);
}

///
/// 解析盒模型尺寸相关数据
///
@function size-parser(
    $size: 'base',
    $is-single: false,
    $is-limit-min-width: false,
    $padding-horizontal: var(--box-#{$size}-padding-horizontal),
    $border-width: var(--box-#{$size}-border-width),
    $border-style: solid
) {
    $min-height: var(--box-#{$size}-min-height);

    // border
    $border-width-default: var(--box-#{$size}-border-width);
    $border-width-top: nth(functions.expand($border-width), 1);
    $border-width-right: nth(functions.expand($border-width), 2);
    $border-width-bottom: nth(functions.expand($border-width), 3);
    $border-width-left: nth(functions.expand($border-width), 4);

    $border-radius: var(--box-#{$size}-border-radius);

    // padding
    $padding-vertical: var(--box-#{$size}-padding-vertical);

    $padding-top: padding-side($padding-vertical, $border-width-top, $border-width-default);
    $padding-right: padding-side($padding-horizontal, $border-width-right, $border-width-default);
    $padding-bottom: padding-side($padding-vertical, $border-width-bottom, $border-width-default);
    $padding-left: padding-side($padding-horizontal, $border-width-left, $border-width-default);

    $padding: functions.shorthand($padding-top $padding-right $padding-bottom $padding-left);

    // font
    $font-size: var(--font-size-#{$size});
    $line-height: var(--line-height-#{$size});

    @return (
        size: $size,
        is-single: $is-single,
        is-limit-min-width: $is-limit-min-width,
        min-height: $min-height,
        border: (
            style: $border-style,
            radius: (
                shorthand: $border-radius,
            ),
            width: (
                shorthand: $border-width,
                default: $border-width-default,
                top: $border-width-top,
                right: $border-width-right,
                bottom: $border-width-bottom,
                left: $border-width-left,
            ),
        ),
        padding: (
            shorthand: $padding,
            top: $padding-top,
            right: $padding-right,
            bottom: $padding-bottom,
            left: $padding-left,
        ),
        font-size: var(--font-size-#{$size}),
        line-height: var(--line-height-#{$size})
    );
}

///
/// @access private
///
/// 计算盒元素中某个单一方向上的内边距
///
/// 因为 nami 中允许为盒元素自定义边框长度，因此需要根据边框长度调整其同一方向上的内边距的长度，
/// 以保证内容区域保持在盒元素的中心。
///
@function padding-side($padding, $border, $border-default) {
    @if $border == $border-default {
        @return $padding;
    } @else if $border eq 0 {
        @return calc(#{$padding} + #{$border-default});
    } @else {
        @return calc(#{$padding} - #{$border} + #{$border-default});
    }
}
